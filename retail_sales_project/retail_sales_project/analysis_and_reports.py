
"""
Analysis & Reporting Script
- Connects to SQLite DB created by setup_and_load.py
- Runs key analyses
- Exports an Excel workbook with tables & embedded charts
- Exports a PPTX report using the generated chart images
Run:
    python analysis_and_reports.py
"""
import os
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
from pptx import Presentation
from pptx.util import Inches, Pt

DB_PATH = "retail_sales.db"
OUTPUT_DIR = os.path.join("outputs")
IMG_DIR = os.path.join(OUTPUT_DIR, "images")
os.makedirs(IMG_DIR, exist_ok=True)

def query_df(conn, sql):
    return pd.read_sql_query(sql, conn)

def save_chart(fig, name):
    out = os.path.join(IMG_DIR, f"{name}.png")
    fig.savefig(out, bbox_inches="tight", dpi=150)
    plt.close(fig)
    return out

def make_charts(conn):
    charts = {}

    # Sales by Month
    df_month = query_df(conn, """
        SELECT Year||'-'||Month AS YearMonth, SUM(TotalSales) AS Revenue
        FROM sales_clean
        GROUP BY Year, Month
        ORDER BY Year, Month;
    """)
    fig = plt.figure()
    plt.plot(df_month["YearMonth"], df_month["Revenue"])
    plt.title("Monthly Revenue")
    plt.xlabel("Month")
    plt.ylabel("Revenue")
    plt.xticks(rotation=45, ha="right")
    charts["monthly_revenue"] = save_chart(fig, "monthly_revenue")

    # Top 10 Items by Revenue
    df_items = query_df(conn, """
        SELECT ItemDescription, SUM(TotalSales) AS Revenue
        FROM sales_clean
        GROUP BY ItemDescription
        ORDER BY Revenue DESC
        LIMIT 10;
    """)
    fig = plt.figure()
    plt.bar(df_items["ItemDescription"], df_items["Revenue"])
    plt.title("Top 10 Items by Revenue")
    plt.xlabel("Item")
    plt.ylabel("Revenue")
    plt.xticks(rotation=45, ha="right")
    charts["top_items"] = save_chart(fig, "top_items")

    # Revenue by Country (Top 10)
    df_country = query_df(conn, """
        SELECT Country, SUM(TotalSales) AS Revenue
        FROM sales_clean
        GROUP BY Country
        ORDER BY Revenue DESC
        LIMIT 10;
    """)
    fig = plt.figure()
    plt.bar(df_country["Country"], df_country["Revenue"])
    plt.title("Revenue by Country (Top 10)")
    plt.xlabel("Country")
    plt.ylabel("Revenue")
    plt.xticks(rotation=45, ha="right")
    charts["country_revenue"] = save_chart(fig, "country_revenue")

    # Hourly Sales Trend
    df_hour = query_df(conn, """
        SELECT Hour, SUM(TotalSales) AS Revenue
        FROM sales_clean
        GROUP BY Hour
        ORDER BY CAST(Hour AS INTEGER);
    """)
    fig = plt.figure()
    plt.plot(df_hour["Hour"], df_hour["Revenue"])
    plt.title("Hourly Revenue Trend")
    plt.xlabel("Hour of Day")
    plt.ylabel("Revenue")
    charts["hourly_revenue"] = save_chart(fig, "hourly_revenue")

    return df_month, df_items, df_country, df_hour, charts

def write_excel(df_month, df_items, df_country, df_hour, charts):
    xlsx_path = os.path.join(OUTPUT_DIR, "Retail_Sales_Report.xlsx")
    with pd.ExcelWriter(xlsx_path, engine="xlsxwriter") as writer:
        df_month.to_excel(writer, sheet_name="Monthly Revenue", index=False)
        df_items.to_excel(writer, sheet_name="Top Items", index=False)
        df_country.to_excel(writer, sheet_name="Country Revenue", index=False)
        df_hour.to_excel(writer, sheet_name="Hourly Revenue", index=False)

        # Insert chart images
        workbook  = writer.book
        for sheet, img_key, cell in [
            ("Monthly Revenue", "monthly_revenue", "E2"),
            ("Top Items", "top_items", "E2"),
            ("Country Revenue", "country_revenue", "E2"),
            ("Hourly Revenue", "hourly_revenue", "E2"),
        ]:
            worksheet = writer.sheets[sheet]
            worksheet.insert_image(cell, charts[img_key])

    return xlsx_path

def write_ppt(charts):
    prs = Presentation()
    # Title slide
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = "Retail Sales Analysis"
    slide.placeholders[1].text = "Automated report generated by Python"

    # Add each chart on its own slide
    for title, path in [
        ("Monthly Revenue", charts["monthly_revenue"]),
        ("Top Items by Revenue", charts["top_items"]),
        ("Revenue by Country", charts["country_revenue"]),
        ("Hourly Revenue Trend", charts["hourly_revenue"]),
    ]:
        layout = prs.slide_layouts[5]  # Title Only
        slide = prs.slides.add_slide(layout)
        slide.shapes.title.text = title
        left = Inches(1)
        top = Inches(1.5)
        slide.shapes.add_picture(path, left, top, width=Inches(8))

    ppt_path = os.path.join(OUTPUT_DIR, "Retail_Sales_Presentation.pptx")
    prs.save(ppt_path)
    return ppt_path

def main():
    if not os.path.exists(DB_PATH):
        raise FileNotFoundError("SQLite DB not found. Run setup_and_load.py first.")
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    os.makedirs(IMG_DIR, exist_ok=True)

    conn = sqlite3.connect(DB_PATH)
    with conn:
        df_month, df_items, df_country, df_hour, charts = make_charts(conn)

    xlsx_path = write_excel(df_month, df_items, df_country, df_hour, charts)
    ppt_path = write_ppt(charts)

    print("Excel report:", xlsx_path)
    print("PPT report:", ppt_path)

if __name__ == "__main__":
    main()
